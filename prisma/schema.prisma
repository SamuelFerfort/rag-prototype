// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  projects      ProjectUser[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Project management models
model Project {
  id              String        @id @default(cuid())
  name            String
  description     String?
  status          ProjectStatus @default(ACTIVO)
  
  // Client info embedded directly
  clientName      String
  clientLocation  String?
  clientType      ClientType
  clientDescription String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  category        ProjectCategory @relation(fields: [categoryId], references: [id])
  categoryId      String
  users           ProjectUser[]
  documents       Document[]
  memories        Memory[]
}


model ProjectCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  projects    Project[]
}

model ProjectUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  
  @@unique([userId, projectId])
}


model Document {
  id           String   @id @default(cuid())
  name         String
  path         String
  mimeType     String
  size         Int
  vectorId     String?  // ID used in Pinecone to reference this document
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
}

model Memory {
  id           String   @id @default(cuid())
  name         String
  content      String   @db.Text
  vectorId     String?  // ID used in Pinecone to reference this memory
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
}

enum ProjectStatus {
  ACTIVO
  INACTIVO
}

enum ClientType {
  PUBLICO
  PRIVADO
}